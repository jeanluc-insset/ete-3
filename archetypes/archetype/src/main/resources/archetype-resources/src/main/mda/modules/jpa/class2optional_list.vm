#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package ${symbol_dollar}{current.owningPackage}.model;



${symbol_pound}foreach (${symbol_dollar}aDependency in ${symbol_dollar}current.allDependencies)
${symbol_pound}if (${symbol_dollar}aDependency.hasStereotype("Entity"))
import ${symbol_dollar}{aDependency.owningPackage.name}.model.${symbol_dollar}{aDependency.name};
${symbol_pound}else
import ${symbol_dollar}{aDependency.owningPackage.name}.${symbol_dollar}{aDependency.name};
${symbol_pound}end
${symbol_pound}end
import fr.insset.jeanluc.util.factory.FactoryMethods;
import fr.upjv.mis.ete.util.OptionalList;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * Convenient class to manage complex navigations without worrying of null
 * references.<br>
 * Holds the same getters and methods than the ${symbol_dollar}{current.name} class.
 *
 * @author jldeleage
 */
public class OptionalList${symbol_dollar}{current.name} extends LinkedList<Optional${symbol_dollar}{current.name}> {





    public boolean isPresent() {
        return present;
    }

    public void setPresent(boolean inPresent) {
        present = inPresent;
    }


    /**
     * 
     */
    public List<${symbol_dollar}{current.name}> get() throws InstantiationException {
        if (isPresent()) {
            List<${symbol_dollar}{current.name}>    result = FactoryMethods.newList(${symbol_dollar}{current.name}.class);
            for (Optional${symbol_dollar}{current.name} item : this) {
                result.add(item.get());
            }
            return result;
        }
        throw new RuntimeException("Optional object is absent");
    }


    //========================================================================//



${symbol_pound}foreach (${symbol_dollar}aProperty in ${symbol_dollar}current.ownedAttribute)
${symbol_pound}set (${symbol_dollar}t = ${symbol_dollar}aProperty.type.recBaseType)

${symbol_pound}if (${symbol_dollar}aProperty.type.collection)
/*      // a collection of collections ! Not currently handled
    public OptionalList${symbol_dollar}{t.name}  get${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}() {
        OptionalList${symbol_dollar}{t.name} result;
        if (isPresent()) {
            result = OptionalList${symbol_dollar}{t.name}.ofNullable(null);
        }

        return result;
    }
*/
${symbol_pound}else
${symbol_pound}${symbol_pound}         not a collection 
${symbol_pound}if (${symbol_dollar}t.name.equals("int")) ${symbol_pound}set(${symbol_dollar}tn = "Integer")
${symbol_pound}elseif (${symbol_dollar}t.name.equals("double")) ${symbol_pound}set(${symbol_dollar}tn="Double")
${symbol_pound}elseif (${symbol_dollar}t.name.equals("date")) ${symbol_pound}set(${symbol_dollar}tn="java.util.Date")
${symbol_pound}elseif (${symbol_dollar}t.name.equals("boolean")) ${symbol_pound}set(${symbol_dollar}tn="Boolean")
${symbol_pound}else ${symbol_pound}set(${symbol_dollar}tn=${symbol_dollar}t.name)
${symbol_pound}end

${symbol_pound}if (${symbol_dollar}dialect.isEntity(${symbol_dollar}t))
    public OptionalList${symbol_dollar}tn get${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}() {
        OptionalList${symbol_dollar}tn  result =  new OptionalList${symbol_dollar}{tn}();
        if (isPresent()) {
            result.setPresent(present);
            for (Optional${symbol_dollar}{current.name} item : this) {
                result.add(item.get${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}());
            }
        }
        return result;
    }
${symbol_pound}else
    public OptionalList<${symbol_dollar}tn> get${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}() {
        OptionalList<${symbol_dollar}tn>  result =  new OptionalList<${symbol_dollar}tn>();
        if (isPresent()) {
            result.setPresent(present);
            for (Optional${symbol_dollar}{current.name} item : this) {
                result.add(item.get().get${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}());
            }
        }
        return result;
    }
 ${symbol_pound}end
${symbol_pound}end
${symbol_pound}end




    //========================================================================//


${symbol_pound}foreach (${symbol_dollar}aMethod in ${symbol_dollar}current.ownedOperation)
    public ${symbol_dollar}dialect.moft2lt(${symbol_dollar}aMethod.type.name) ${symbol_dollar}{aMethod.name}(${symbol_pound}foreach(${symbol_dollar}aParam in ${symbol_dollar}{aMethod.ownedParameter})${symbol_dollar}{dialect.mt2lt(${symbol_dollar}aParam.type)} ${symbol_dollar}{aParam.name}${symbol_pound}if( ${symbol_dollar}foreach.hasNext ), ${symbol_pound}end ${symbol_pound}end) {
        if (isPresent()) {
            ${symbol_pound}if (! ${symbol_dollar}dialect.moft2lt(${symbol_dollar}aMethod.type.name).equals("void"))return ${symbol_pound}end${symbol_dollar}{aMethod.name}(${symbol_pound}foreach(${symbol_dollar}aParam in ${symbol_dollar}{aMethod.ownedParameter})${symbol_dollar}{aParam.name}${symbol_pound}if( ${symbol_dollar}foreach.hasNext ), ${symbol_pound}end ${symbol_pound}end);
        }
    }
${symbol_pound}end




    //========================================================================//

    private     boolean             present;


}