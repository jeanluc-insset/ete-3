#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package ${symbol_dollar}{current.owningPackage.name}.jpa;


import ${package}.ete.jpa.AbstractJpa;
import ${symbol_dollar}{current.owningPackage.name}.model.*;
import fr.mis.ete.util.optional.OptionalList;
import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.ejb.Stateless;
import javax.persistence.*;
import javax.persistence.criteria.*;
import javax.persistence.metamodel.*;



/**
 *
 * @author jldeleage
 */
@Stateless
public class ${symbol_dollar}{current.name}Jpa extends AbstractJpa<${symbol_dollar}{current.name}> {

${symbol_pound}if (true == ${symbol_dollar}javase)
    private EntityManagerFactory factory;
${symbol_pound}else
    @PersistenceContext(unitName = "${symbol_dollar}{pu}")
${symbol_pound}end
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
${symbol_pound}if (true == ${symbol_dollar}javase)
        if (factory == null) {
            factory = Persistence.createEntityManagerFactory("${symbol_dollar}{pu}");
        }
        if (em == null) {
            em = factory.createEntityManager();
        }
${symbol_pound}end
        return em;
    }

    public ${symbol_dollar}{current.name}Jpa() {
        super(${symbol_dollar}{current.name}.class);
    }


    //========================================================================//

${symbol_pound}foreach (${symbol_dollar}aProperty in ${symbol_dollar}current.ownedAttribute)
${symbol_pound}if (${symbol_dollar}dialect.isEntity(${symbol_dollar}aProperty.type))

    public List<${symbol_dollar}{current.name}> findBy${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}(${symbol_dollar}{dialect.mt2lt(${symbol_dollar}aProperty.type)} inValue) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<${symbol_dollar}{current.name}> cq = cb.createQuery(${symbol_dollar}{current.name}.class);
        Root<${symbol_dollar}{current.name}> from = cq.from(${symbol_dollar}{current.name}.class);
        // There is an "unkown compilation error" if we try to use the metamodel
        // generator processor so we use the metamodel on runtime only
        Metamodel metamodel = em.getMetamodel();
        EntityType<${symbol_dollar}{current.name}> entity = metamodel.entity(${symbol_dollar}{current.name}.class);
        SingularAttribute<? super ${symbol_dollar}{current.name}, ?> singularAttribute = entity.getSingularAttribute("${symbol_dollar}{dialect.i2lc(${symbol_dollar}aProperty.type.name)}");
        from.join(singularAttribute);
        cq.where(cb.equal(from.get(singularAttribute), inValue));
        TypedQuery<${symbol_dollar}{current.name}> query = em.createQuery(cq);
        return query.getResultList();
    }
${symbol_pound}end
${symbol_pound}end


    //========================================================================//
    //           F I L T E R S   F O R   I N V A R I A N T S   O F            //
    //            E V E N T U A L L Y   O T H E R   C L A S S E S             //
    //========================================================================//


${symbol_pound}set (${symbol_dollar}support = ${symbol_dollar}current.support)
${symbol_pound}foreach (${symbol_dollar}aProperty in ${symbol_dollar}support.keySet())
${symbol_pound}set (${symbol_dollar}aQuery = ${symbol_dollar}support.get(${symbol_dollar}aProperty))
    /**
     * Should return all the instances of ${symbol_dollar}{current.name} which are acceptable
     * as values of ${symbol_dollar}{aProperty.name} of ${symbol_dollar}{aProperty.owningMofClass.name}
     * without violating any constraint on ${symbol_dollar}{aQuery.clientClass.name}
     */
    public List<${symbol_dollar}{current.name}> getAll${symbol_dollar}{current.name}As${symbol_dollar}{dialect.i2uc(${symbol_dollar}aProperty.name)}For${symbol_dollar}{aProperty.owningMofClass.name}(${symbol_dollar}{aProperty.owningMofClass.name} inFor) throws InstantiationException {
        StringBuilder   builder = new StringBuilder("${symbol_dollar}{sql.getSelect(${symbol_dollar}aQuery)}");
        System.out.println("====================================================${symbol_escape}nBuilding the query for ${symbol_dollar}{aProperty.name}");
        // Some JPA implementations don't support named SQL parameters
        // We keep the ordered collection of the parameters we have in our query
        List    parameters = new LinkedList();
${symbol_pound}foreach (${symbol_dollar}aFilter in ${symbol_dollar}support.get(${symbol_dollar}aProperty).filters)
        System.out.println("******");

        System.out.println("    Examen du filtre pour l'invariant ${symbol_dollar}{aFilter.invariant.name}");
${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)
        System.out.println("        Examen de la variable ${symbol_dollar}{aVariable.name} de type ${symbol_dollar}{aVariable.type.name}");
${symbol_pound}if (${symbol_dollar}aVariable.type.collection)
        System.out.println("            c'est une collection");
        OptionalList${symbol_dollar}{dialect.mt2lt(${symbol_dollar}aVariable.type.recBaseType)}  ${symbol_dollar}{aVariable.name} = ${symbol_dollar}{dialect.getValueOfParameter(${symbol_dollar}aVariable)};
${symbol_pound}else
        System.out.println("            ce n'est pas une collection");
        Optional${symbol_dollar}{dialect.mt2lt(${symbol_dollar}aVariable.type)}  ${symbol_dollar}{aVariable.name} = ${symbol_dollar}{dialect.getValueOfParameter(${symbol_dollar}aVariable)};
${symbol_pound}end
${symbol_pound}end${symbol_pound}${symbol_pound} loop on variables

        // Setting the variables
${symbol_pound}set (${symbol_dollar}join = ${symbol_dollar}sql.getJoin(${symbol_dollar}aFilter))
${symbol_pound}if (${symbol_dollar}aFilter.variables.size()>0)
        if (${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)${symbol_dollar}{aVariable.name}.isPresent()${symbol_pound}if( ${symbol_dollar}foreach.hasNext ) && ${symbol_pound}end${symbol_pound}end) {
            System.out.println("All the variables are present, we add the joins");
            builder.append("${symbol_dollar}{sql.getJoin(${symbol_dollar}aFilter)}");
${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)
            parameters.add(${symbol_dollar}{aVariable.name});
${symbol_pound}end
        }
${symbol_pound}end
${symbol_pound}end
${symbol_pound}if (${symbol_dollar}support.get(${symbol_dollar}aProperty).filters.size() >0)
        System.out.println("    Ajout de la clause where");
        String          where = " WHERE ";
${symbol_pound}end
${symbol_pound}foreach (${symbol_dollar}aFilter in ${symbol_dollar}support.get(${symbol_dollar}aProperty).filters)
        System.out.println("        Ajout de la condition de l'invariant ${symbol_dollar}{aFilter.invariant.name} ?");
${symbol_pound}if (${symbol_dollar}aFilter.variables.size()>0)
        if (${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)${symbol_dollar}{aVariable.name}.isPresent()${symbol_pound}if( ${symbol_dollar}foreach.hasNext ) && ${symbol_pound}end${symbol_pound}end) {
            System.out.println("We add the filter for ${symbol_dollar}{aFilter.invariant.name}");
            builder.append(where);
            builder.append("${symbol_dollar}{sql.getWhere(${symbol_dollar}aFilter, ${symbol_dollar}aQuery)}");
${symbol_pound}if (${symbol_dollar}foreach.hasNext)
            where = " AND ";
${symbol_pound}end
        }
${symbol_pound}end
${symbol_pound}end${symbol_pound}${symbol_pound} loop on filters
${symbol_pound}foreach (${symbol_dollar}aFilter in ${symbol_dollar}support.get(${symbol_dollar}aProperty).filters)
        System.out.println("      ----------------------------------${symbol_escape}nSet the variables for ${symbol_dollar}{aFilter.invariant.name}");
${symbol_pound}if (${symbol_dollar}aFilter.variables.size()>0)
        if (${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)${symbol_dollar}{aVariable.name}.isPresent()${symbol_pound}if( ${symbol_dollar}foreach.hasNext ) && ${symbol_pound}end${symbol_pound}end) {
            System.out.println("All variables are present");
            int     i=1;
${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)
            System.out.println("Set the variable ${symbol_dollar}{aVariable.name}");
${symbol_pound}if (${symbol_dollar}dialect.isEntity(${symbol_dollar}aVariable.type.recBaseType))
${symbol_pound}if (${symbol_dollar}aVariable.type.collection)
            // Collection
${symbol_pound}else
            // ${symbol_dollar}{aVariable.type.name} : ${symbol_dollar}{dialect.isEntity(${symbol_dollar}aVariable.type)}
            System.out.println("Setting the parameter ${symbol_dollar}{aVariable.name} to " + ${symbol_dollar}{aVariable.name}.get().getId() + " in position " + i);
//            query.setParameter(i, ${symbol_dollar}{aVariable.name}.get().getId());
//            query.setParameter("${symbol_dollar}{aVariable.name}", ${symbol_dollar}{aVariable.name}.get().getId());
            System.out.println("After this setting, the query is " + builder.toString());
${symbol_pound}end
${symbol_pound}else
            // ${symbol_dollar}{aVariable.type.name} : ${symbol_dollar}{dialect.isEntity(${symbol_dollar}aVariable.type)}
            System.out.println("Setting the parameter ${symbol_dollar}{aVariable.name} to " + ${symbol_dollar}{aVariable.name}.get());/            query.setParameter(i, ${symbol_dollar}{aVariable.name}.get());
//            query.setParameter("${symbol_dollar}{aVariable.name}", ${symbol_dollar}{aVariable.name}.get());
            System.out.println("The query is " + builder.toString());
${symbol_pound}end
${symbol_pound}end
        }
${symbol_pound}end
${symbol_pound}end
        String sqlQuery = builder.toString();
${symbol_pound}foreach (${symbol_dollar}aFilter in ${symbol_dollar}support.get(${symbol_dollar}aProperty).filters)
${symbol_pound}foreach (${symbol_dollar}aVariable in ${symbol_dollar}aFilter.variables)
        if (${symbol_dollar}{aVariable.name}.isPresent()) {
${symbol_pound}if (${symbol_dollar}aVariable.type.name.equals("String"))
            sqlQuery = sqlQuery.replace(":${symbol_dollar}{aVariable.name}", "'" + ${symbol_dollar}{aVariable.name}.get() + "'");
${symbol_pound}elseif (${symbol_dollar}dialect.isEntity(${symbol_dollar}aVariable.type.recBaseType))
         sqlQuery = sqlQuery.replace(":${symbol_dollar}{aVariable.name}", "" + ${symbol_dollar}{aVariable.name}.get().getId());
${symbol_pound}else
            sqlQuery = sqlQuery.replace(":${symbol_dollar}{aVariable.name}", ${symbol_dollar}{aVariable.name}.get());
${symbol_pound}end
        }
${symbol_pound}end
${symbol_pound}end
        Query  query = getEntityManager().createNativeQuery(sqlQuery, ${symbol_dollar}{current.name}.class);
        System.out.println("Resulting query : " + query);
        List<${symbol_dollar}{current.name}>  result = query.getResultList();
        System.out.println("The result is : " + result + " (" + result.size() + " items)");
        return result;
    }


${symbol_pound}end



}
