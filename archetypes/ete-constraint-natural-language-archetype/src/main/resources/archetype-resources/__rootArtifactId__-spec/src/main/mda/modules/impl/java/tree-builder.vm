#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}                                                                            ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound} Generates an abstract tree builder.                                        ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound} An instance of this class is a visitor for GelExpressions. It takes any    ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound} GelExpression concrete tree and returns the matching abstract tree.        ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}                                                                            ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound} Usage :                                                                    ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}  GelParser             parser  = GelParserFactory.newParser(inExpression); ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}  GelExpressionContext  ctx          = parser.gelExpression();              ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}  TreeBuilder           treeBuilder  = new TreeBuilder(inContext);          ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}  GelExpression         expression   = treeBuilder.visitGelExpression(ctx); ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}                                                                            ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}                                                                            ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
package ${package}.impl;





import fr.insset.jeanluc.ete.gel.GelExpression;
import fr.insset.jeanluc.ete.gel.Step;
import fr.insset.jeanluc.ete.meta.model.emof.MofClass;
import fr.insset.jeanluc.ete.meta.model.emof.MofParameter;
import fr.insset.jeanluc.ete.meta.model.mofpackage.MofPackage;
import fr.insset.jeanluc.ete.meta.model.types.Classifier;
import fr.insset.jeanluc.ete.meta.model.types.TypedElement;
import fr.insset.jeanluc.ete.gel.VariableDefinition;
import fr.insset.jeanluc.ete.gel.VariableReference;
import fr.insset.jeanluc.ete.gel.impl.AddImpl;
import fr.insset.jeanluc.ete.gel.impl.AndImpl;
import fr.insset.jeanluc.ete.gel.impl.AtPreImpl;
import fr.insset.jeanluc.ete.gel.impl.AttributeNavImpl;
import fr.insset.jeanluc.ete.gel.impl.AverageImpl;
import fr.insset.jeanluc.ete.gel.impl.BooleanLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.CollectImpl;
import fr.insset.jeanluc.ete.gel.impl.CollectionMethodNavImpl;
import fr.insset.jeanluc.ete.gel.impl.DateLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.DifferentImpl;
import fr.insset.jeanluc.ete.gel.impl.DivImpl;
import fr.insset.jeanluc.ete.gel.impl.EqualImpl;
import fr.insset.jeanluc.ete.gel.impl.ExcludesImpl;
import fr.insset.jeanluc.ete.gel.impl.FlatCollectImpl;
import fr.insset.jeanluc.ete.gel.impl.FlattenImpl;
import fr.insset.jeanluc.ete.gel.impl.FloatingPointLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.GreaterOrEqualImpl;
import fr.insset.jeanluc.ete.gel.impl.GreaterThanImpl;
import fr.insset.jeanluc.ete.gel.impl.IncludesImpl;
import fr.insset.jeanluc.ete.gel.impl.IntegerLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.IsNewImpl;
import fr.insset.jeanluc.ete.gel.impl.LambdaImpl;
import fr.insset.jeanluc.ete.gel.impl.LessOrEqualImpl;
import fr.insset.jeanluc.ete.gel.impl.LessThanImpl;
import fr.insset.jeanluc.ete.gel.impl.MethodNavImpl;
import fr.insset.jeanluc.ete.gel.impl.ModImpl;
import fr.insset.jeanluc.ete.gel.impl.MultImpl;
import fr.insset.jeanluc.ete.gel.impl.NotImpl;
import fr.insset.jeanluc.ete.gel.impl.OppImpl;
import fr.insset.jeanluc.ete.gel.impl.OrImpl;
import fr.insset.jeanluc.ete.gel.impl.ResultImpl;
import fr.insset.jeanluc.ete.gel.impl.SelectImpl;
import fr.insset.jeanluc.ete.gel.impl.SelfImpl;
import fr.insset.jeanluc.ete.gel.impl.StringLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.SubImpl;
import fr.insset.jeanluc.ete.gel.impl.SumImpl;
import fr.insset.jeanluc.ete.gel.impl.VariableDefinitionImpl;
import fr.insset.jeanluc.ete.gel.impl.VariableReferenceImpl;
import fr.insset.jeanluc.ete.gel.impl.XorImpl;import fr.insset.jeanluc.util.factory.FactoryRegistry;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import javax.annotation.Generated;
import ${package}.esperantoParser;



/**
 * Generates an abstract tree builder.
 * An instance of this class is a visitor for GelExpressions. It takes any
 * GelExpression concrete tree and returns the matching abstract tree.
 *
 * Usage : <code><pre>
GelParser            parser             = GelParserFactory.newParser(aString);
GelExpressionContext ctx                = parser.gelExpression();
TreeBuilder          treeBuilder        = new TreeBuilder(inContext);
GelExpression        abstractExpression = treeBuilder.visitGelExpression(ctx);
</pre></code>
 *
 */
@Generated("ete - jean-luc@insset.fr  modules/maven-project/gel-impl/java/tree-builder.vm")
public class ${dollar_symbol}{dialect.i2uc(${dollar_symbol}projectName)}TreeBuilder extends ${package}.${dollar_symbol}{projectName}ParserBaseVisitor<GelExpression> {



    public ${dollar_symbol}{dialect.i2uc(${dollar_symbol}projectName)}TreeBuilder(MofPackage inModel, TypedElement inContext) {
        this(inModel, inContext, new HashMap<>());
    }

    public ${dollar_symbol}{dialect.i2uc(${dollar_symbol}projectName)}TreeBuilder(MofPackage inModel, TypedElement inContext, Map<String, VariableDefinition> inVariables) {
        variables = inVariables;
        model = inModel;
        context = inContext;
        if (context instanceof fr.insset.jeanluc.ete.meta.model.emof.MofOperation) {
            fr.insset.jeanluc.ete.meta.model.emof.MofOperation operation
                    = (fr.insset.jeanluc.ete.meta.model.emof.MofOperation)context;
            contextClass.push(operation.getOwningMofClass());
            for (MofParameter aParameter : operation.getOwnedParameter()) {
                // TODO : use a factory
                VariableDefinition  parameterDefinition = new VariableDefinitionImpl();
                parameterDefinition.setIdentifier(aParameter.getName());
                parameterDefinition.setType(aParameter.getType());
                variables.put(aParameter.getName(), parameterDefinition);
            }
        }
        else {
            contextClass.push((MofClass)context);
        }

        FactoryRegistry registry = FactoryRegistry.getRegistry();
${symbol_pound}foreach(${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if (${symbol_dollar}{aClass.getValueOf("literalType")})
        registry.registerDefaultFactory("${symbol_dollar}{aClass.getValueOf("literalType")}", ${symbol_dollar}{aClass.name}Impl.class);
${symbol_pound}elseif (${symbol_dollar}{aClass.getValueOf("symbol")})
        registry.registerDefaultFactory("${symbol_dollar}{aClass.getValueOf("symbol")}", ${symbol_dollar}{aClass.name}Impl.class);
${symbol_pound}end
${symbol_pound}end
        registry.registerDefaultFactory("self", SelfImpl.class);
//        registry.registerDefaultFactory("Navigation", NavigationImpl.class);
//        registry.registerDefaultFactory(CollectionOperationExpression.class, CollectionOperationExpressionImpl.class);
        registry.registerDefaultFactory(VariableReference.class, VariableReferenceImpl.class);
    }


    @Override
    public GelExpression visitNlExpression(${rootArtifactId}Parser.NlExpressionContext ctx) {
        navigable = new Stack<>();
        return super.visitNlExpression(ctx); //To change body of generated methods, choose Tools | Templates.
    }


    //========================================================================//

    private     MofPackage                              model;

    /**
     *  Should be an instance of MofClass or (Mof)Operation.
     */
    private     TypedElement                            context;

    /**
     * An expression can contains sub-expressions. For example<br>
     * <code>pilot[</code>
     * The first item of the stack is defined by :<br><code>
     * context instanceof MofClass ==&gt; context == contextClass<br>
     * context instanceof Operation ==&gt; context.getOwningMofClass() == contextClass</code>
     */
    private     Stack<Classifier>                       contextClass = new Stack<>();

    private     Stack<Step>                             navigable;

    private     Map<String, VariableDefinition>         variables = new HashMap<>();

    private     String                                  currentNavOperator;

}

