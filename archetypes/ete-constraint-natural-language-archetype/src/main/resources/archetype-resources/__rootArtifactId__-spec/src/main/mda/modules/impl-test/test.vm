#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package ${groupId}.ete.${symbol_dollar}{rootArtifactId}.impl;


import ${groupId}.ete.api.EteException;
import ${groupId}.ete.gel.impl.factory.GelFactory;
import ${groupId}.ete.meta.model.core.PrimitiveDataTypes;
import ${groupId}.ete.meta.model.core.impl.Factories;
import ${groupId}.ete.meta.model.emof.MofClass;
import ${groupId}.ete.meta.model.emof.MofProperty;
import ${groupId}.ete.meta.model.mofpackage.EteModel;
import ${groupId}.ete.meta.model.mofpackage.MofPackage;
import ${groupId}.ete.meta.model.mofpackage.impl.EteModelImpl;
import ${groupId}.ete.meta.model.types.TypedElement;
import ${groupId}.ete.meta.model.types.collections.MofCollection;
/*
import ${groupId}.gel.GelParser;
import ${groupId}.gel.GelParser.GelExpressionContext;
import ${groupId}.gel.*;
import ${groupId}.gel.impl.GelEvaluator;
import ${groupId}.gel.impl.SelfImpl;
*/
import ${groupId}.util.factory.FactoryRegistry;
import ${groupId}.xmi.io.impl.XmlModelReader;
import java.lang.reflect.InvocationTargetException;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.BeforeClass;



public class GelTest {


 
    static EteModel            model;
    static MofClass            qcmClass;
    static MofProperty         question_property;
    static MofCollection       listOfQuestionClass;
    static MofClass            questionClass;
    static MofClass            responseClass;
    static MofProperty         responseProperty;
    static MofProperty         libelleReponseProperty;



    @BeforeClass
    public static void setUp() throws EteException, InstantiationException, IllegalAccessException  {
        model               = (EteModel) buildModel();
        qcmClass            = (MofClass) model.getElementByName("QCM");
        question_property   = qcmClass.getOwnedAttribute("questions");
        listOfQuestionClass = (MofCollection) question_property.getType();
        questionClass       = (MofClass) listOfQuestionClass.getBaseType();
        responseClass       = (MofClass) model.getElementByName("Reponse");
        responseProperty    = questionClass.getOwnedAttribute("reponses");
        libelleReponseProperty = responseClass.getOwnedAttribute("libelle");
    }


    //========================================================================//

    @Test
    public void testIntLiteral() {
        System.out.println("intLiteral");
        testExpression(12, "12");
    }

    @Test
    public void testStringLiteral() {
        System.out.println("stringLiteral");
        testExpression("12", "${symbol_escape}"12${symbol_escape}"");
    }

    @Test
    public void testBooleanLiteral() {
        System.out.println("booleanLiteral");
        testExpression(true, "true");
    }

    @Test
    public void testDate() {
        System.out.println("testDate");
        java.time.LocalDate localDate = LocalDate.now();
        System.out.println(localDate.toString());
        testExpression(localDate, '"' + localDate.toString() + '"');
    }

    @Test
    public void testSum() {
        System.out.println("testSum");
        testExpression(15, "12 + 3");
    }

    @Test
    public void testCompare() {
        System.out.println("compare");
        testExpression(true, "12 > 5");
    }

    @Test
    public void testComplexNumericExpression() {
        System.out.println("testComplexNumericExpression");
        testExpression(14, "3 + 4*5 - 9");
    }


    //========================================================================//



   @Test
    public void testSelfExpression() throws InstantiationException {
        System.out.println("testSelfExpression");
        /* Currently, the equals method has not been overridden in the SelfImpl
         * class so we cannot test the equality of the instance generated by
         * the parser and a fresh new instance created in the test method.
         * Instead we check that the object is instance of the Self "class"
         * (actually interface).
         */
        testExpression(qcmClass, "self", model, qcmClass, Self.class);
    }


    @Test
    public void testNavigationExpression() {
        System.out.println("testNavigationExpression");
        testExpression(question_property, "self.questions", model, qcmClass, Navigation.class);
    }


    @Test
    public void testComplexNavigationExpression() {
        System.out.println("testComplexNavigationExpression");
        testExpression(responseProperty, "self.questions.reponses", model, qcmClass, Navigation.class);
    }

    @Test
    public void testMoreComplexNavigationExpression() {
        System.out.println("testMoreComplexNavigationExpression");
        testExpression(libelleReponseProperty, "self.questions.reponses.libelle", model, qcmClass, Navigation.class);
    }


    @Test
    public void testImplicitAndComplexNavigationExpression() {
        System.out.println("testImplicitAndComplexNavigationExpression");
        testExpression(libelleReponseProperty, "questions.reponses.libelle", model, qcmClass, Navigation.class);
    }


//    @Test
    public void testCollectionOperation() {
        System.out.println("testCollectionOperation");
        testExpression(null, "questions->size()", model, qcmClass, null);
    }



    //========================================================================//


    protected   GelExpression    testExpression(Object inExpectedValue,
                                String inExpression) {
        try {
            return testExpression(inExpectedValue, inExpression, GelFactory.newModel(), null, null);
        } catch (InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(GelTest.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }



    /**
     * The expectedValue is not the one returned by TreeBuilder but returned by
     * the evaluator.
     */
    protected   GelExpression    testExpression(Object inExpectedValue,
                                String inExpression,
                                EteModel inModel, TypedElement inContext,
                                Class inExpectedClass) {
        try {
            GelParser              parser       = GelParserFactory.newParser(inExpression);
            GelExpressionContext   ctx          = parser.gelExpression();
            TreeBuilder            treeBuilder  = new TreeBuilder(inModel, inContext);
            GelExpression          expression   = treeBuilder.visitGelExpression(ctx);
            GelEvaluator           evaluator    = new GelEvaluator();
            Object                 result       = evaluator.genericVisit(expression, inContext);
            if (inExpectedClass != null) {
                assertTrue(inExpectedClass.isInstance(expression));
            }
            assertEquals(inExpectedValue, result);
            return expression;
        } catch (IllegalAccessException
                    | IllegalArgumentException | InvocationTargetException ex) {
            Logger.getLogger(GelTest.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }

    protected static MofPackage  buildModel() throws EteException, InstantiationException, IllegalAccessException {
        Factories.init();
        XmlModelReader instance = new XmlModelReader();
        String  url = "../../../src/test/mda/models/QCM_complet.xml";
        EteModel parent = new EteModelImpl();
        PrimitiveDataTypes.init(parent);
        EteModel result = instance.readModel(url, parent);
        return result;
    }

}

