#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
################################################################################
##                                                                            ##
## Generates an abstract tree builder.                                        ##
## An instance of this class is a visitor for GelExpressions. It takes any    ##
## GelExpression concrete tree and returns the matching abstract tree.        ##
##                                                                            ##
## Usage :                                                                    ##
##  GelParser             parser  = GelParserFactory.newParser(inExpression); ##
##  GelExpressionContext  ctx          = parser.gelExpression();              ##
##  TreeBuilder           treeBuilder  = new TreeBuilder(inContext);          ##
##  GelExpression         expression   = treeBuilder.visitGelExpression(ctx); ##
##                                                                            ##
##                                                                            ##
################################################################################
package titi.impl;





import fr.insset.jeanluc.ete.gel.DateLiteral;
import fr.insset.jeanluc.ete.gel.IntegerLiteral;
import fr.insset.jeanluc.ete.gel.StringLiteral;
import fr.insset.jeanluc.ete.gel.FloatingPointLiteral;
import fr.insset.jeanluc.ete.gel.BooleanLiteral;
import fr.insset.jeanluc.ete.gel.GelExpression;
import fr.insset.jeanluc.ete.gel.Step;
import fr.insset.jeanluc.ete.meta.model.emof.MofClass;
import fr.insset.jeanluc.ete.meta.model.emof.MofParameter;
import fr.insset.jeanluc.ete.meta.model.mofpackage.MofPackage;
import fr.insset.jeanluc.ete.meta.model.types.Classifier;
import fr.insset.jeanluc.ete.meta.model.types.TypedElement;
import fr.insset.jeanluc.ete.gel.*;
import static fr.insset.jeanluc.ete.gel.GelContext.CURRENT;
import fr.insset.jeanluc.ete.gel.VariableDefinition;
import fr.insset.jeanluc.ete.gel.VariableReference;
import fr.insset.jeanluc.ete.gel.impl.AddImpl;
import fr.insset.jeanluc.ete.gel.impl.AndImpl;
import fr.insset.jeanluc.ete.gel.impl.AtPreImpl;
import fr.insset.jeanluc.ete.gel.impl.AttributeNavImpl;
import fr.insset.jeanluc.ete.gel.impl.AverageImpl;
import fr.insset.jeanluc.ete.gel.impl.BooleanLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.CollectImpl;
import fr.insset.jeanluc.ete.gel.impl.CollectionMethodNavImpl;
import fr.insset.jeanluc.ete.gel.impl.DateLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.DifferentImpl;
import fr.insset.jeanluc.ete.gel.impl.DivImpl;
import fr.insset.jeanluc.ete.gel.impl.EqualImpl;
import fr.insset.jeanluc.ete.gel.impl.ExcludesImpl;
import fr.insset.jeanluc.ete.gel.impl.FlatCollectImpl;
import fr.insset.jeanluc.ete.gel.impl.FlattenImpl;
import fr.insset.jeanluc.ete.gel.impl.FloatingPointLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.GreaterOrEqualImpl;
import fr.insset.jeanluc.ete.gel.impl.GreaterThanImpl;
import fr.insset.jeanluc.ete.gel.impl.IncludesImpl;
import fr.insset.jeanluc.ete.gel.impl.IntegerLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.IsNewImpl;
import fr.insset.jeanluc.ete.gel.impl.LambdaImpl;
import fr.insset.jeanluc.ete.gel.impl.LessOrEqualImpl;
import fr.insset.jeanluc.ete.gel.impl.LessThanImpl;
import fr.insset.jeanluc.ete.gel.impl.MethodNavImpl;
import fr.insset.jeanluc.ete.gel.impl.ModImpl;
import fr.insset.jeanluc.ete.gel.impl.MultImpl;
import fr.insset.jeanluc.ete.gel.impl.NotImpl;
import fr.insset.jeanluc.ete.gel.impl.OppImpl;
import fr.insset.jeanluc.ete.gel.impl.OrImpl;
import fr.insset.jeanluc.ete.gel.impl.ResultImpl;
import fr.insset.jeanluc.ete.gel.impl.SelectImpl;
import fr.insset.jeanluc.ete.gel.impl.SelfImpl;
import fr.insset.jeanluc.ete.gel.impl.StringLiteralImpl;
import fr.insset.jeanluc.ete.gel.impl.SubImpl;
import fr.insset.jeanluc.ete.gel.impl.SumImpl;
import fr.insset.jeanluc.ete.gel.impl.VariableDefinitionImpl;
import fr.insset.jeanluc.ete.gel.impl.VariableReferenceImpl;
import fr.insset.jeanluc.ete.gel.impl.XorImpl;
import fr.insset.jeanluc.util.factory.FactoryMethods;
import fr.insset.jeanluc.util.factory.FactoryRegistry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import javax.annotation.Generated;
import org.antlr.v4.runtime.tree.ParseTree;
import titi.${artifactIdI2uc}Parser;



/**
 * Generates an abstract tree builder.
 * An instance of this class is a visitor for GelExpressions. It takes any
 * GelExpression concrete tree and returns the matching abstract tree.
 *
 * Usage : <code><pre>
GelParser            parser             = GelParserFactory.newParser(aString);
GelExpressionContext ctx                = parser.gelExpression();
TreeBuilder          treeBuilder        = new TreeBuilder(inContext);
GelExpression        abstractExpression = treeBuilder.visitGelExpression(ctx);
</pre></code>
 *
 */
@Generated("ete - jean-luc@insset.fr  modules/java/tree-builder.vm")
public class ${dialect.i2uc($projectName)}TreeBuilder extends titi.${artifactIdI2uc}ParserBaseVisitor<GelExpression> {



    public ${dialect.i2uc($projectName)}TreeBuilder(MofPackage inModel, TypedElement inContext) {
//        this(inModel, inContext, new HashMap<>());
        FactoryRegistry registry = FactoryRegistry.getRegistry();
${symbol_pound}foreach(${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if (${symbol_dollar}{aClass.getValueOf("literalType")})
        registry.registerDefaultFactory("${symbol_dollar}{aClass.getValueOf("literalType")}", ${symbol_dollar}{aClass.name}Impl.class);
${symbol_pound}end
${symbol_pound}end
${symbol_pound}foreach(${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if (${symbol_dollar}{aClass.getValueOf("symbol")})
${symbol_pound}if (${symbol_dollar}{aClass.hasStereotype("operation")})
        registry.registerDefaultFactory("${symbol_dollar}{aClass.getValueOf("symbol")}", ${symbol_dollar}{aClass.name}Impl.class);
${symbol_pound}end
${symbol_pound}end
${symbol_pound}end
${symbol_pound}foreach(${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if (${symbol_dollar}{aClass.hasStereotype("collection_operation")})
        registry.registerDefaultFactory("${symbol_dollar}{dialect.i2lc(${symbol_dollar}aClass.name)}", ${symbol_dollar}{aClass.name}Impl.class);
${symbol_pound}end
${symbol_pound}end
    }


//============================================================================//
//                      G E N E R A T E D   M E T H O D S                     //
//============================================================================//


${symbol_pound}foreach(${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if(${symbol_dollar}aClass.getValueOf("literalType"))
    // LITERAL TYPE : ${symbol_dollar}{aClass.getValueOf("literalType")}
    @Override
    public GelExpression visit${symbol_dollar}{dialect.i2uc(${symbol_dollar}aClass.name)}(${symbol_dollar}{dialect.i2uc($projectName)}Parser.${symbol_dollar}{dialect.i2uc(${symbol_dollar}aClass.name)}Context ctx) {
        try {
            String text = ctx.getText();
            ${symbol_dollar}{aClass.name} newInstance = (${symbol_dollar}{aClass.name})FactoryRegistry.newInstance("${symbol_dollar}{aClass.getValueOf("literalType")}");
            newInstance.setValueAsString(text);
            return newInstance;
        } catch (InstantiationException | IllegalAccessException ex) {
            throw new RuntimeException(ex);
        }
    }

${symbol_pound}end
${symbol_pound}end

//============================================================================//

${symbol_pound}foreach (${symbol_dollar}aClass in ${symbol_dollar}current.classes)
${symbol_pound}if (${symbol_dollar}aClass.getValueOf("kind"))
${symbol_pound}if ("true" == ${symbol_dollar}aClass.getValueOf("noVisit"))
${symbol_pound}else
${symbol_pound}set (${symbol_dollar}kind = ${symbol_dollar}aClass.getValueOf("kind"))
    @Override
    public GelExpression visit${symbol_dollar}{aClass.name}Expression(${symbol_dollar}{dialect.i2uc($projectName)}Parser.${symbol_dollar}{aClass.name}ExpressionContext ctx) {
        List<ParseTree> children = ctx.children;
        if (children.size() == 1) {
            GelExpression result = children.get(0).accept(this);
${symbol_pound}if (${symbol_dollar}kind == "navigation")
            context.remove(CURRENT);
${symbol_pound}end
            return result;
        }
        try {
${symbol_pound}set (${symbol_dollar}fragment = "fragments/" + ${symbol_dollar}kind + ".vm")
${symbol_pound}parse (${symbol_dollar}fragment)

        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

${symbol_pound}end
${symbol_pound}end
${symbol_pound}end



    //========================================================================//
    //                  H A R D   C O D E D   M E T H O D S                   //
    //========================================================================//

/*
    public ${dialect.i2uc($projectName)}TreeBuilder(MofPackage inModel, TypedElement inContext, Map<String, VariableDefinition> inVariables) {
        variables = inVariables;
        model = inModel;
        context = inContext;
        if (context instanceof fr.insset.jeanluc.ete.meta.model.emof.MofOperation) {
            fr.insset.jeanluc.ete.meta.model.emof.MofOperation operation
                    = (fr.insset.jeanluc.ete.meta.model.emof.MofOperation)context;
            contextClass.push(operation.getOwningMofClass());
            for (MofParameter aParameter : operation.getOwnedParameter()) {
                // TODO : use a factory
                VariableDefinition  parameterDefinition = new VariableDefinitionImpl();
                parameterDefinition.setIdentifier(aParameter.getName());
                parameterDefinition.setType(aParameter.getType());
                variables.put(aParameter.getName(), parameterDefinition);
            }
        }
        else {
            contextClass.push((MofClass)context);
        }

        FactoryRegistry registry = FactoryRegistry.getRegistry();
${symbol_pound}foreach($aClass in $current.classes)
${symbol_pound}if (${aClass.getValueOf("literalType")})
        registry.registerDefaultFactory("${aClass.getValueOf("literalType")}", ${aClass.name}Impl.class);
${symbol_pound}elseif (${aClass.getValueOf("symbol")})
        registry.registerDefaultFactory("${aClass.getValueOf("symbol")}", ${aClass.name}Impl.class);
${symbol_pound}end
${symbol_pound}end
        registry.registerDefaultFactory("self", SelfImpl.class);
//        registry.registerDefaultFactory("Navigation", NavigationImpl.class);
//        registry.registerDefaultFactory(CollectionOperationExpression.class, CollectionOperationExpressionImpl.class);
        registry.registerDefaultFactory(VariableReference.class, VariableReferenceImpl.class);
    }


    @Override
    public GelExpression visitNlExpression(${artifactIdI2uc}Parser.NlExpressionContext ctx) {
        navigable = new Stack<>();
        return super.visitNlExpression(ctx); //To change body of generated methods, choose Tools | Templates.
    }
*/

    //========================================================================//

//    private     MofPackage                              model;

    /**
     *  Should be an instance of MofClass or (Mof)Operation.
     */
//    private     TypedElement                            context;

    /**
     * An expression can contains sub-expressions. For example<br>
     * <code>pilot[certificates->includes(self.plane.planeModel)]</code>
     * The first item of the stack is defined by :<br><code>
     * context instanceof MofClass ==&gt; context == contextClass<br>
     * context instanceof Operation ==&gt; context.getOwningMofClass() == contextClass</code>
     */
//    private     Stack<Classifier>                       contextClass = new Stack<>();

//    private     Stack<Step>                             navigable;

//    private     Map<String, VariableDefinition>         variables = new HashMap<>();

//    private     String                                  currentNavOperator;


    private GelContext<GelExpression>   context;


}

