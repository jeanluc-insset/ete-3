package titi.gel.impl;



import titi.ete.meta.model.emof.Feature;
import titi.ete.meta.model.emof.MofClass;
import titi.ete.meta.model.mofpackage.MofPackage;
## #foreach ($aClass in $classes)
## #if ($aClass.hasStereotype("operation"))
## import titi.gel.${aClass.name};
## #end
## #end
import titi.gel.*;
import titi.util.visit.DynamicVisitorSupport;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;



public class ${rootArtifactId}Evaluator extends DynamicVisitorSupport {




    public ${rootArtifactId}Evaluator() {
        this.register("visit", "titi.gel");
    }

/*
    public Object visitOperationCallExpression(OperationCallExpression inExpression, Object... inContext) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        // 1- Collect the values of the operands
        System.out.println("Visiting " + inExpression);
        List<Object>    operandValues = new LinkedList<>();
        for (GelExpression operand : inExpression.getOperand()) {
            Object operandValue = genericVisit(operand, inContext);
            operandValues.add(operandValue);
        }
        // 2- Build an UELExpression from these values
        StringBuilder   builder = new StringBuilder();
        switch (operandValues.size()) {
            case 1:
                break;
            case 2:
                break;
        }
        // 3- Evaluate the UELExpression and return the value
        return null;
    }
*/


    public Object visitLiteral(Literal inLiteral, Object... inContext) {
        Logger      logger = Logger.getGlobal();
        logger.log(Level.FINE, "Visiting " + inLiteral);
        return null;
    }


    public MofClass visitSelf(Self inSelf, Object... inContext) {
        MofClass result = (MofClass) inSelf.getType();
        return result;
    }
 

    public Feature visitNavigation(Navigation inNavigation, Object... inContext) {
        return inNavigation.getToFeature();
    }


#foreach($aClass in $classes)
#if (${aClass.hasStereotype("literal")})
#set($effectiveType = ${dialect.moft2lt($aClass.getValueOf("literalType"))})
    public ${effectiveType} visit${aClass.name}(${aClass.name} inLiteral, Object... inContext) {
        return (${effectiveType})inLiteral.getValue();
    }
#elseif (${aClass.getValueOf("symbol")})
/*
    public Object visit${aClass.name}(${aClass.name} inOperation, Object... inContext)
                 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        List<Object> operandValues = getOperandValues(inOperation, inContext);
        Object result = null;
        #if (${aClass.getValueOf("arity")} == 1)
        // arity = 1
        #elseif (${aClass.getValueOf("arity")} == 2)
        // arity = 2
        #end
        return result;
    }
*/
#end
#end




    //========================================================================//

    public Integer visitAdd(Add inOperation, Object... inContext)
                 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        List    rawOperands = getOperandValues(inOperation, inContext);
        List<Integer>   operands = rawOperands;
        Integer result = operands.get(0) + operands.get(1);
        return result; 
    }


    public Integer visitMult(Mult inOperation, Object... inContext)
                 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        List    rawOperands = getOperandValues(inOperation, inContext);
        List<Integer>   operands = rawOperands;
        Integer result = operands.get(0) * operands.get(1);
        return result; 
    }

    public Integer visitMinus(Minus inOperation, Object... inContext)
                 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        List    rawOperands = getOperandValues(inOperation, inContext);
        List<Integer>   operands = rawOperands;
        Integer result = operands.get(0) - operands.get(1);
        return result; 
    }

    public Boolean visitGreaterThan(GreaterThan inOperation, Object... inContext)
                 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        List    rawOperands = getOperandValues(inOperation, inContext);
        List<Integer>   operands = rawOperands;
        Boolean result = operands.get(0) > operands.get(1);
        return result; 
    }

    protected List<Object> getOperandValues(Operation inOperation, Object inContext)
                                throws IllegalAccessException,
                                        IllegalArgumentException,
                                        InvocationTargetException {
        List<Object>    operandValues = new LinkedList<>();
        for (GelExpression operand : inOperation.getOperand()) {
            Object operandValue = genericVisit(operand, inContext);
            operandValues.add(operandValue);
        }
        return operandValues;
    }



}


