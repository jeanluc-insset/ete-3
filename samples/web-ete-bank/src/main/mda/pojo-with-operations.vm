package ${current.owningPackage.qualifiedName.replace("::", ".")};


#foreach ($aDependance in ${current.dependances})
import ${dialect.getQualifiedName($aDependance)};
#end
import java.util.LinkedList;
import java.util.List;
import javax.annotation.Generated;



@Generated("ete - jean-luc@insset.fr  src/test/mda/templates/pojo-with-operations.vm")
public class ${current.name} #if (${current.superClass.size()} > 0) extends ${current.superClass.get(0).package.name}.${current.superClass.get(0)} #end {

#if ($current.hasStereotype("singleton"))
    private ${current.name}() {
    }
#else
    public ${current.name}() {
    }
#end


    //========================================================================//


#foreach ($tagValue in ${current.getTagValues().keySet()})
    public String get${tagValue.name.substring(0,1).toUpperCase()}${tagValue.name.substring(1)}() {
        return "${current.getValueOf($tagValue.name)}";
    }
#end



    //========================================================================//
    //                A C C E S S O R S   and   M U T A T O R S               //
    //========================================================================//



#foreach ($aProperty in $current.ownedAttribute)
    #if($aProperty.name && $aProperty.type.name)

    public #if ($aProperty.type.package) ${aProperty.type.qualifiedName.replace("::", ".")}#else${dialect.mt2lt($aProperty.type)}#end get${aProperty.name.substring(0,1).toUpperCase()}${aProperty.name.substring(1)}() {
        return ${aProperty.name};
    }

    public void set${aProperty.name.substring(0,1).toUpperCase()}${aProperty.name.substring(1)}(#if ($aProperty.type.package) ${aProperty.type.qualifiedName.replace("::", ".")}#else${dialect.mt2lt($aProperty.type)}#end inValue) {
        ${aProperty.name} = inValue;
    }

    #if($aProperty.type.collection)
    public void add${aProperty.name.substring(0,1).toUpperCase()}${aProperty.name.substring(1)}(${dialect.mt2lt($aProperty.type.baseType)} inValue) {
        ${aProperty.name}.add(inValue);
    }
    #end

    #end
#end


    //========================================================================//
    //                           O P E R A T I O N S                          //
    //========================================================================//


#foreach ($aMethod in ${current.ownedOperation})
#foreach ($aPrecondition in ${aMethod.preconditions})
//    @${dialect.getConditionName($aPrecondition)}
#end
    public ${dialect.mt2lt($aMethod.type)} ${aMethod.name}(#foreach($aParam in ${aMethod.ownedParameter})${dialect.mt2lt($aParam.type)} ${aParam.name} #end) {
#if ($dialect.getOperationBody($aMethod).length() > 0)
${dialect.getOperationBody($aMethod)}
##elseif ($dialect.mt2lt($aMethod.type) == "double")
##        return 0.0;
##elseif ($dialect.mt2lt($aMethod.type) == "int")
##        return 0;
##elseif ($dialect.mt2lt($aMethod.type) == "String")
##        return "";
#else
        throw new RuntimeException("Not specified yet");
#end
    }
#end


    //========================================================================//
    //                   I N S T A N C E   V A R I A B L E S                  //
    //========================================================================//


#foreach ($aProperty in $current.ownedAttribute)
#if($aProperty.type.collection)
    private ${dialect.mt2lt($aProperty.type)} ${aProperty.name} = new LinkedList<>();
#else
    private #if ($aProperty.type.package) ${aProperty.type.qualifiedName.replace("::", ".")}#else${dialect.mt2lt($aProperty.type)}#end ${aProperty.name};
#end
#end


#if ($current.hasStereotype("singleton"))
    public static ${current.name} get${current.name}() {
        return singleton;
    }

    private static ${current.name} singleton = new ${current.name}();

#end



}


