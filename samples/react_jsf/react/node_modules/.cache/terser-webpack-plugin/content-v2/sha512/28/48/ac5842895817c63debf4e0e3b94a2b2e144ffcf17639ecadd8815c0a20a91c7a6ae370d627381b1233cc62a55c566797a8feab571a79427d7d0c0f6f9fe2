{"map":"{\"version\":3,\"sources\":[\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/components/PlaneModel.js\",\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/components/PlaneModelList.js\",\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/App.js\",\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/serviceWorker.js\",\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/index.js\",\"/Users/jldeleage/NetBeansProjects/divers/client-demo3/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/jldeleage/NetBeansProjects/divers/client-demo3/src/logo.svg\"],\"names\":[\"PlaneModel\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"designation\",\"PlaneModelList\",\"planeModels\",\"map\",\"pm\",\"components_PlaneModel\",\"key\",\"fetch\",\"credentials\",\"then\",\"response\",\"json\",\"console\",\"log\",\"App\",\"src\",\"logo\",\"alt\",\"href\",\"target\",\"rel\",\"components_PlaneModelList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"0QASeA,IAAAA,EANf,SAAoBC,GAChB,OAAQC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,QACnBH,EAAAC,EAAAC,cAAA,OAAA,KAAOH,EAAMK,eCONC,IAAAA,EARf,SAAwBN,GACpB,OACIC,EAAAC,EAAAC,cAAA,KAAA,KACCH,EAAMO,YAAYC,IAAI,SAAAC,GAAE,OAAIR,EAAAC,EAAAC,cAACO,EAAD,CAAYC,IAAKF,EAAGJ,YAAaA,YAAaI,EAAGJ,kBCDlFE,EAAc,CACjB,CAAEF,YAAa,cACR,CAAEA,YAAY,eACd,CAAEA,YAAY,gBAKtBO,MAAM,mEAAoE,CAACC,YAAa,gBACrFC,KAAK,SAASC,GACb,IAAIC,EAAOD,EAASC,OAEpB,OADAC,QAAQC,IAAIF,GACLA,QA8BIG,mLAtBX,OACElB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKiB,IAAKC,EAAAA,EAAMjB,UAAU,WAAWkB,IAAI,SACzCrB,EAAAC,EAAAC,cAAA,IAAA,KAAA,QACOF,EAAAC,EAAAC,cAAA,OAAA,KAAA,cADP,wBAGAF,EAAAC,EAAAC,cAAA,IAAA,CACEC,UAAU,WACVmB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASTxB,EAAAC,EAAAC,cAACuB,EAAD,CAAgBnB,YAAaA,YAlBZoB,EAAAA,WCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB\",\"sourcesContent\":[\"import React from \\\"react\\\";\\nimport \\\"./List.css\\\";\\n\\nfunction PlaneModel(props) {\\n    return (<div className=\\\"list\\\">\\n        <span>{props.designation}</span>\\n    </div>);\\n}\\n\\nexport default PlaneModel;\\n\",\"import React from \\\"react\\\";\\n\\nimport PlaneModel from \\\"./PlaneModel\\\";\\n\\nfunction PlaneModelList(props) {\\n    return (\\n        <ul>\\n        {props.planeModels.map(pm => <PlaneModel key={pm.designation} designation={pm.designation}/>)}\\n        </ul>\\n    );\\n}\\n\\nexport default PlaneModelList;\\n\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport PlaneModelList from \\\"./components/PlaneModelList\\\";\\n\\n\\nlet planeModels = [\\n\\t{ designation: \\\"Boieng 747\\\" },\\n        { designation:\\\"Airbus A380\\\"},\\n        { designation:\\\"Airbus A340\\\"}\\n];\\n\\n\\n// fetch('http://localhost:8080/demo3-1.0/webresources/planeModel')\\nfetch('http://localhost:8080/insset-airways-1.0/webresources/planeModel', {credentials: 'same-origin'})\\n  .then(function(response) {\\n    let json = response.json();\\n    console.log(json);\\n    return json;\\n  })\\n;\\n\\n\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <p>\\n            Edit <code>src/App.js</code> and save to reload.\\n          </p>\\n          <a\\n            className=\\\"App-link\\\"\\n            href=\\\"https://reactjs.org\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            Learn React\\n          </a>\\n        </header>\\n\\t<PlaneModelList planeModels={planeModels}/>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,n,t){},17:function(e,n,t){},19:function(e,n,t){},21:function(e,n,t){\"use strict\";t.r(n);var a=t(0),o=t.n(a),r=t(2),i=t.n(r),c=(t(15),t(3)),s=t(4),l=t(7),u=t(5),d=t(8),p=t(6),m=t.n(p);t(17),t(19);var g=function(e){return o.a.createElement(\"div\",{className:\"list\"},o.a.createElement(\"span\",null,e.designation))};var f=function(e){return o.a.createElement(\"ul\",null,e.planeModels.map(function(e){return o.a.createElement(g,{key:e.designation,designation:e.designation})}))},h=[{designation:\"Boieng 747\"},{designation:\"Airbus A380\"},{designation:\"Airbus A340\"}];fetch(\"http://localhost:8080/insset-airways-1.0/webresources/planeModel\",{credentials:\"same-origin\"}).then(function(e){var n=e.json();return console.log(n),n});var v=function(e){function n(){return Object(c.a)(this,n),Object(l.a)(this,Object(u.a)(n).apply(this,arguments))}return Object(d.a)(n,e),Object(s.a)(n,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"img\",{src:m.a,className:\"App-logo\",alt:\"logo\"}),o.a.createElement(\"p\",null,\"Edit \",o.a.createElement(\"code\",null,\"src/App.js\"),\" and save to reload.\"),o.a.createElement(\"a\",{className:\"App-link\",href:\"https://reactjs.org\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Learn React\")),o.a.createElement(f,{planeModels:h}))}}]),n}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},6:function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},9:function(e,n,t){e.exports=t(21)}},[[9,2,1]]]);","extractedComments":[]}