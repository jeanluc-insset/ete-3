package ${current.owningPackage}.model;



import fr.mis.ete.util.optional.OptionalList;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * Convenient class to manage complex navigations without worrying of null
 * references.<br>
 * Holds the same getters and methods than the ${current.name} class.
 *
 * @author jldeleage
 */
public class Optional${current.name} #if (${current.superClass.size()}>0)extends ${current.superClass.get(0).owningPackage.name}.model.Optional${current.superClass.get(0).name} #end {


    public static Optional${current.name} ofNullable(${current.name} inDelegate) {
        Optional${current.name} result = new Optional${current.name}();
        result.delegate = inDelegate;
        return result;
    }


    public boolean isPresent() {
        return delegate != null;
    }


    public ${current.name} get() {
        return delegate;
    }


    //========================================================================//

#foreach ($aProperty in $current.ownedAttribute)

#set ($t = $aProperty.type.recBaseType)

#if ($aProperty.type.collection)
    public OptionalList${t.name}  get${dialect.i2uc($aProperty.name)}() {
        OptionalList${t.name} result = new OptionalList${t.name}();
        if (isPresent()) {
            result.setPresent(true);
            for (${t.name} anItem : delegate.get${dialect.i2uc($aProperty.name)}()) {
                result.add(Optional${t.name}.ofNullable(anItem));
            }
        }
        return result;
    }
#elseif ($t.hasStereotype("Entity"))
    public Optional$dialect.mt2lt($aProperty.type) get${dialect.i2uc($aProperty.name)}() {
        $dialect.mt2lt($aProperty.type) newDelegate;
        if (!isPresent()) {
            newDelegate = null;
        } else {
            newDelegate = delegate.get${dialect.i2uc($aProperty.name)}();
        }
        return Optional${aProperty.type}.ofNullable(newDelegate);
    }
#else
#if ($t=="int") #set($t = "Integer")
#elseif ($t=="double") #set($t="Double")
#elseif ($t=="date") #set($t="java.util.Date")
#end
    public Optional<$t> get${dialect.i2uc($aProperty.name)}() {
        $t newDelegate;
        if (!isPresent()) {
            newDelegate = null;
        } else {
            newDelegate = delegate.get${dialect.i2uc($aProperty.name)}();
        }
        return Optional.ofNullable(newDelegate);
    }
#end
#end




    //========================================================================//


#foreach ($aMethod in $current.ownedOperation)
    public $dialect.moft2lt($aMethod.type.name) ${aMethod.name}(#foreach($aParam in ${aMethod.ownedParameter})${dialect.mt2lt($aParam.type)} ${aParam.name}#if( $foreach.hasNext ), #end #end) {
        if (isPresent()) {
            #if (! $dialect.moft2lt($aMethod.type.name).equals("void"))return #end${aMethod.name}(#foreach($aParam in ${aMethod.ownedParameter})${aParam.name}#if( $foreach.hasNext ), #end #end);
        }
    }
#end




    //========================================================================//

    private     ${current.name}     delegate;


}