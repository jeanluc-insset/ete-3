package ${current.owningPackage};



import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author jldeleage
 */
public class ${current.name} #if (${current.superClass.size()} > 0) extends ${current.superClass.get(0).owningPackage.name}.${current.superClass.get(0)} #end  implements Serializable {


#foreach ($tagValue in ${current.getTagValues().keySet()})
    public default String get${dialect.i2uc($tagValue.name)}() {
        return "${current.getValueOf($tagValue.name)}";
    }
#end


    //========================================================================//

#foreach ($aProperty in $current.ownedAttribute)
    public $dialect.mt2lt($aProperty.type) get${dialect.i2uc($aProperty.name)}() {
        return ${aProperty.name};
    }

    public void set${dialect.i2uc($aProperty.name)}(${dialect.mt2lt($aProperty.type)} inValue) {
        ${aProperty.name} = inValue;
    }

#if ($aProperty.type.collection)
    public void add${dialect.i2uc($aProperty.name)}(${dialect.mt2lt($aProperty.type.baseType)} inValue) {
        ${aProperty.name}.add(inValue);
    }

    public void remove${dialect.i2uc($aProperty.name)}(${dialect.mt2lt($aProperty.type.baseType)} inValue) {
        ${aProperty.name}.remove(inValue);
    }
#end
#end


    //========================================================================//


#foreach ($aMethod in $current.ownedOperation)
    public $dialect.moft2lt($aMethod.type.name) ${aMethod.name}(#foreach($aParam in ${aMethod.ownedParameter})${aParam.type} ${aParam.name} #end) {
${dialect.getOperationBody($aMethod, "    ")}
    }
#end


    @Override
    public String toString() {
#if ($current.ownedAttribute.size() > 0)
        return "" + ${current.ownedAttribute.get(0)};
#else
        return super.toString();
#end
    }

    //========================================================================//

#foreach ($aProperty in $current.ownedAttribute)
    $dialect.mt2lt($aProperty.type)      ${aProperty.name};
#end



}