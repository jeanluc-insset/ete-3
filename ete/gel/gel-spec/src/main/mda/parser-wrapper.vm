package  fr.insset.jeanluc.ete.gel;


import fr.insset.jeanluc.ete.meta.model.core.NamedElement;
import fr.insset.jeanluc.ete.meta.model.mofpackage.EteModel;
import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Scanner;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.TokenStream;


public interface ParserWrapper {

    public default Parser getParser(String inConstraintFile, Class lexerClass, Class parserClass) throws FileNotFoundException, InstantiationException, NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        String readFile = readFile(inConstraintFile);
        ANTLRInputStream input = new ANTLRInputStream(readFile);
        Constructor<? extends Lexer> lexerConstructor = lexerClass.getConstructor(CharStream.class);
        Lexer lexer =  lexerConstructor.newInstance(input);
        CommonTokenStream commonTokenStream = new CommonTokenStream(lexer);
        Constructor<? extends Parser> parserConstructor = parserClass.getConstructor(TokenStream.class);
        return parserConstructor.newInstance(commonTokenStream);
    };

    /**
     * Reads a contextual expression, typically an expression which is embedded
     * in a model
     */
    public default GenericExpression buildAbstractTree(String inExpression, EteModel inModel, NamedElement inContextElement) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Reads non contextual expressions, typically the content of a text file.
     */
    public default void  readExpressions(String inExpressions, EteModel inoutModel) {
        throw new UnsupportedOperationException("Not supported yet.");
    }


    public default String readFile(String inFilePath) throws FileNotFoundException {
        String content = new Scanner(new File(inFilePath)).useDelimiter("\\Z").next();
        return content;
    }


}


