package ${current.owningPackage.name}.impl;

#foreach ($aDependance in $current.dependances)
import ${dialect.getQualifiedName($aDependance)};
#end
import ${current.owningPackage.name}.*;
import java.util.List;



public class ${current.name}Impl #if (${current.superClass.size()} > 0) extends ${current.superClass.get(0).owningPackage.name}.impl.${current.superClass.get(0)}Impl #end implements ${current.name} {


    //========================================================================//


#foreach ($aProperty in $current.ownedAttribute)
#if($aProperty.name && $aProperty.type.name)
    public ${dialect.mt2lt($aProperty.type)} get${dialect.i2uc($aProperty.name)}() {
        return ${aProperty.name};
    }

    public void set${dialect.i2uc($aProperty.name)}(${dialect.mt2lt($aProperty.type)} inValue) {
        ${aProperty.name} = inValue;
    }
#if ($aProperty.isCollection())
    public void add${dialect.i2uc($aProperty.name)}(${dialect.mt2lt($aProperty.type)} inValue) {
        ${aProperty.name}.add(inValue);
    }
#end

#end
#end


    //========================================================================//


#foreach ($aProperty in $current.ownedAttribute)
    #if($aProperty.name && $aProperty.type.name)
    private ${dialect.mt2lt($aProperty.type)} ${aProperty.name};
    #end
#end


}


