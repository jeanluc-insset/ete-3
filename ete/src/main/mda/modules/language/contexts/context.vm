################################################################################
##                                                                            ##
## Generates a context for translating concrete syntax tree to abstract       ##
## syntax tree                                                                ##
##                                                                            ##
################################################################################
package fr.insset.jeanluc.ete.${dialect.i2lc($projectName)};


import fr.insset.jeanluc.ete.meta.model.emof.MofOperation;
import fr.insset.jeanluc.ete.meta.model.types.MofType;
import fr.insset.jeanluc.ete.meta.model.types.TypedElement;
import javax.annotation.Generated;


/**
 * A context manages variables in a hierarchic architecture.
 *
 * @author jldeleage
 */
@Generated("ete - jean-luc@insset.fr  ete/src/main/mda/modules/language/context.vm")
public interface ${dialect.i2uc($projectName)}Context<T> {


    public final static String      ROOT         = "root",
                                    MODEL        = "model",
                                    SELF         = "self",
                                    CURRENT      = "current",
                                    CONTEXT      = "context",
                                    RESULT       = "result",
                                    CURRENT_TYPE = "current_type";


    public default TypedElement getContext() throws InstantiationException, IllegalAccessException {
        return (TypedElement)resolve(CONTEXT);
    }


    public default MofType getContextType() throws InstantiationException, IllegalAccessException {
        TypedElement context = getContext();
        if (context instanceof MofOperation) {
            return ((MofOperation)context).getOwningMofClass();
        }
        else {
            return (MofType)context;
        }
    }




    /**
     * Looks for the value of <code>inString</code>
     */
    public T        resolve(String inString) throws InstantiationException, IllegalAccessException;
    /**
     *
     */
    public Object   resolveVariable(String inString) throws InstantiationException, IllegalAccessException;
    /**
     * Looks for an operation with <code>inString</code> as identifier
     */
    public T        resolveOperation(String inString, MofType inType) throws InstantiationException, IllegalAccessException;
    /**
     * Looks for a collection operation whose identifier is the value of
     * <code>inString</code>
     */
    public T        resolveCollOp(String inString) throws InstantiationException, IllegalAccessException;

    /**
     * Adds a local variable
     */
    public void     set(String inString, Object inValue);
    /**
     *  Removes a local variable
     */
    public void     remove(String inString);

    /**
     * Local variables sets management
     */
    public void push();
    public void pop() ;


}


