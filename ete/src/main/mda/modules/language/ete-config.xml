<?xml version="1.0" encoding="UTF-8"?>

<!--

    This module helps to create a bunch of projects to parse and evaluate
    a language.
    It is supposed to be called from a specific project named "xxxx-spec"
    and to receive the "projectName" parameter with the value xxxx.
    It builds interfaces and implementations classes in the xxxx-api and
    xxxx-impl projects respectively

 -->


<mda>


    <!--
      -  "Standard" generation : each class in the model is translated to
      -  an interface in the projectName-api subproject and a class in the
      -  projectName-impl subproject.
      -  Furthermore a factory class is created with the "registerFactories"
      -  method. That method registers a factory a class.
      -->
    <transformation-set>
        <module src="../from-spec/ete-config.xml"/>
    </transformation-set>


    <!-- Generation of specific features :
      -     - transformation of a concrete syntax tree to an abstract syntax
      -       tree (class TreeBuilder)
      -     - context of resolution of identifiers (class XxxExpressionContext)
      -     - utility methods to wrap antlr parser and tree builder (class
      -       ParserWrapper)
      --> 
    <transformation-set context="generic">
        <!--<parameter name="context" defaultValue="simple"/>-->
        <!-- Class TreeBuilder, to translate a concrete syntax tree to an
             abstract syntax tree
          -->
        <velocity template="tree-builder.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/TreeBuilder.java"/>
        <!-- Class ParserWrapper : a facade class for antlr parser and
             tree builder
          -->
        <velocity template="parser-wrapper.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}ParserWrapper.java"/>

        <!-- A context is used to resolve identifiers
          -->
        <velocity template="contexts/context.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-api/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}Context.java"/>

        <velocity template="contexts/${context}context.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}ContextImpl.java"/>

<!--        <velocity template="contexts/genericcontext.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/Simple${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}Context.java"/>
        <if test="$simple">
                <velocity template="contexts/simplecontext.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/Simple${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}Context.java"/>
        </if>
        <if test="$mofBased">
                <velocity template="contexts/mofcontext.vm"
                dialect="fr.insset.jeanluc.el.dialect.BasicJavaDialect"
                target="${projectName}-impl/src/main/java/fr/insset/jeanluc/ete/${projectName.toLowerCase()}/impl/Mof${projectName.substring(0,1).toUpperCase()}${projectName.substring(1)}Context.java"/>
        </if>-->

    </transformation-set>

</mda>

