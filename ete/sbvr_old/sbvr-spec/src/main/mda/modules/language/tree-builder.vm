################################################################################
##                                                                            ##
## Generates an abstract tree builder for any Expression Language             ##
## An instance of this class is a visitor for these Expressions. It takes any ##
## expression concrete tree and returns the matching abstract tree.           ##
##                                                                            ##
## Usage :                                                                    ##
##                                                                            ##
##  XxxParser             parser       = XxxParserFactory                     ##
##                                          .newParser(inExpression);         ##
##  XxxExpressionContext  ctx          = parser.xxxExpression();              ##
##  // a context "resolves" identifiers                                       ##
##  XxxContext<XxxExpression> context  = new XxxContextImpl(                  ##
##                                          theModel, theClass, theElement);  ##
##  TreeBuilder           treeBuilder  = new TreeBuilder(inContext);          ##
##  XxxExpression         expression   = treeBuilder.visitXxxExpression(ctx); ##
##                                                                            ##
##  All this stuff is encapsulated in the "buildAbstractTree" static method   ##
##  of the "ParserWrapper" class                                              ##
##                                                                            ##
##                                                                            ##
################################################################################
package fr.insset.jeanluc.ete.${dialect.i2lc($projectName)}.impl;



import fr.insset.jeanluc.ete.gel.GelContext;
import static fr.insset.jeanluc.ete.gel.GelContext.CURRENT;
import static fr.insset.jeanluc.ete.gel.GelContext.ROOT;
import fr.insset.jeanluc.ete.meta.model.emof.MofClass;
import fr.insset.jeanluc.ete.meta.model.emof.MofParameter;
import fr.insset.jeanluc.ete.meta.model.emof.MofProperty;
import fr.insset.jeanluc.ete.meta.model.mofpackage.MofPackage;
import fr.insset.jeanluc.ete.meta.model.mofpackage.PackageableElement;
import fr.insset.jeanluc.ete.meta.model.types.Classifier;
import fr.insset.jeanluc.ete.meta.model.types.MofType;
import fr.insset.jeanluc.ete.meta.model.types.TypedElement;
import fr.insset.jeanluc.ete.meta.model.types.collections.MofCollection;
import fr.insset.jeanluc.ete.${dialect.i2lc($projectName)}.${dialect.i2uc($projectName)}Parser;
import fr.insset.jeanluc.ete.${dialect.i2lc($projectName)}.${dialect.i2uc($projectName)}ParserBaseVisitor;
import fr.insset.jeanluc.ete.${dialect.i2lc($projectName)}.*;
import fr.insset.jeanluc.ete.meta.model.emof.Feature;
import fr.insset.jeanluc.util.factory.FactoryMethods;
import fr.insset.jeanluc.util.factory.FactoryRegistry;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Generated;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.RuleNode;
import fr.insset.jeanluc.ete.util.XList;



/**
 * An instance of this class is a visitor for ${dialect.i2uc($projectName)}Expressions. It takes a
 * ${dialect.i2uc($projectName)}Expression concrete tree and returns the matching abstract tree.
 *
 * Usage : <code><pre>
${dialect.i2uc($projectName)}Parser            parser             = ${dialect.i2uc($projectName)}ParserFactory.newParser(aString);
${dialect.i2uc($projectName)}ExpressionContext ctx                = parser.${dialect.i2lc($projectName)}Expression();
TreeBuilder          treeBuilder        = new TreeBuilder(inContext);
${dialect.i2uc($projectName)}Expression        abstractExpression = treeBuilder.visit${dialect.i2uc($projectName)}Expression(ctx);
</pre></code>
 *
 */
@Generated("ete - jean-luc@insset.fr  src/main/mda/tree-builder.vm")
public class TreeBuilder extends ${dialect.i2uc($projectName)}ParserBaseVisitor<${dialect.i2uc($projectName)}Expression> {


    public TreeBuilder(GelContext inContext) {
        context = inContext;
        FactoryRegistry registry = FactoryRegistry.getRegistry();
#foreach($aClass in $current.classes)
#if (${aClass.getValueOf("literalType")})
        registry.registerDefaultFactory("${aClass.getValueOf("literalType")}", ${aClass.name}Impl.class);
#end
#end
#foreach($aClass in $current.classes)
#if (${aClass.getValueOf("symbol")})
#if (${aClass.hasStereotype("operation")})
        registry.registerDefaultFactory("${aClass.getValueOf("symbol")}", ${aClass.name}Impl.class);
#end
#end
#end
#foreach($aClass in $current.classes)
#if (${aClass.hasStereotype("collection_operation")})
        registry.registerDefaultFactory("${dialect.i2lc($aClass.name)}", ${aClass.name}Impl.class);
#end
#end
        registry.registerDefaultFactory(".",    AttributeNavImpl.class);
        registry.registerDefaultFactory(".att", AttributeNavImpl.class);
        registry.registerDefaultFactory(".op",  MethodNavImpl.class);
        registry.registerDefaultFactory("symbol",  SymbolImpl.class);
    }


    @Override
    public ${dialect.i2uc($projectName)}Expression visit${dialect.i2uc($projectName)}Expression(${dialect.i2uc($projectName)}Parser.${dialect.i2uc($projectName)}ExpressionContext ctx) {
        // Create a fresh stack frame for local variables
//        context.push();
        return super.visit${dialect.i2uc($projectName)}Expression(ctx);
    }


//============================================================================//
//                      G E N E R A T E D   M E T H O D S                     //
//============================================================================//


#foreach ($aClass in $current.classes)
#if ($aClass.getValueOf("literalType"))
    // LITERAL TYPE : ${aClass.getValueOf("literalType")}
    @Override
    public ${dialect.i2uc($projectName)}Expression visit${dialect.i2uc($aClass.name)}(${dialect.i2uc($projectName)}Parser.${dialect.i2uc($aClass.name)}Context ctx) {
        try {
            String text = ctx.getText();
            ${aClass.name} newInstance = (${aClass.name})FactoryRegistry.newInstance("${aClass.getValueOf("literalType")}");
            newInstance.setValueAsString(text);
            return newInstance;
        } catch (InstantiationException | IllegalAccessException ex) {
            throw new RuntimeException(ex);
        }
    }

#end
#end

//============================================================================//

/*
##set ($kind = $aClass.getValueOf("kind"))
    @Override
    public ${dialect.i2uc($projectName)}Expression visit${aClass.name}Expression(${dialect.i2uc($projectName)}Parser.${aClass.name}ExpressionContext ctx) {
        List<ParseTree> children = ctx.children;
        if (children.size() == 1) {
            ${dialect.i2uc($projectName)}Expression result = children.get(0).accept(this);
##if ($kind == "navigation")
            context.remove(CURRENT);
##end
            return result;
        }
        try {
##set ($fragment = "fragments/" + $kind + ".vm")
##parse ($fragment)

        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
*/

##foreach ($aClass in $current.classes)
##if ($aClass.getValueOf("kind"))
##if ("true" == $aClass.getValueOf("noVisit"))
##else

##end
##end
##end



    //========================================================================//
    //                  H A R D   C O D E D   M E T H O D S                   //
    //========================================================================//


    //------------------------------------------------------------------------//
    // Rules for files                                                        //
    // A file defines explicit context for rules. This means that we must     //
    // reset this context several times during parsing                        //
    //------------------------------------------------------------------------//



    //------------------------------------------------------------------------//
    //                       M A I N   D I S P A T C H                        //
    //------------------------------------------------------------------------//


    



    //------------------------------------------------------------------------//
    //                  S T A N D A R D   O P E R A T O R S                   //
    //------------------------------------------------------------------------//



    //------------------------------------------------------------------------//
    //                          N A V I G A T I O N                           //
    //------------------------------------------------------------------------//


    //------------------------------------------------------------------------//
    //         S T R U C T U R E D   N A T U R A L   L A N G U A G E          //
    //------------------------------------------------------------------------//




    //========================================================================//


    GelContext<${dialect.i2uc($projectName)}Expression>   context;


}

