package fr.insset.jeanluc.action.semantics.builder;


import fr.insset.jeanluc.ete.gel.And;
import fr.insset.jeanluc.ete.gel.GelExpression;
import fr.insset.jeanluc.ete.meta.model.constraint.Invariant;
import fr.insset.jeanluc.util.visit.DynamicVisitorSupport;
import java.util.LinkedList;
import java.util.List;
import fr.insset.jeanluc.ete.meta.model.emof.MofProperty;
import fr.insset.jeanluc.ete.xlang.Conditional;
import fr.insset.jeanluc.ete.xlang.Statement;
import fr.insset.jeanluc.ete.xlang.XLangException;
import fr.insset.jeanluc.ete.xlang.impl.XLangExceptionImpl;
import fr.insset.jeanluc.util.factory.FactoryRegistry;
import java.lang.reflect.InvocationTargetException;


/**
 * ActionSemanticsBuilder builds ActionSemantics statements for various
 * purposes.<br>
 * Then a dialect can translate these statements into methods or function
 * in a specific language.<br>
 * The actual code generation is then done by a velocity template, a
 * Mof2Text template or any other tool such as an opaque transformation.<br>
 * ActionSemantics statements describe typically instructions inner to a
 * function, so there is no need to build something like a class, a module and
 * so on. These artifacts are generated by a wrapping tool such as a velocity
 * template.
 *
 * @author jldeleage
 */
public class XLangCheckBuilder extends DynamicVisitorSupport {


    /**
     * The returned statements check an the invariant.
     * 
     * @return 
     */
    public List<Statement>  invariant2Checker(Invariant inInv) {
        List<Statement>     result = new LinkedList<>();
        return result;
    }


    public Object   visitAnd(And inExp, Object... inParameters) {
        return inExp;
    }

    public void buildStatements(GelExpression inExpression, List<Statement> inoutStatements) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException {
        // create an if statement of the form :
        // if not inExpression throw new Exception(...)
        Conditional condition = (Conditional) FactoryRegistry.newInstance(Conditional.class);
        condition.setCondition(inExpression);
        XLangException eteException = new XLangExceptionImpl();
        condition.getOperand().add(eteException);
        inoutStatements.add(condition);
    }
    public List<Statement>  invariant2Select(MofProperty inTarget) {
        List<Statement>     result = new LinkedList<>();
        return result;
    }

}
